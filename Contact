//
//  ViewController.m
//  DEMO
//
//  Created by Juned on 23/01/2016.
//  Copyright Â© 2016 Junaid. All rights reserved.
//

#import "ViewController.h"
#import <AddressBook/AddressBook.h>
#import <Contacts/Contacts.h>
#import "DBManager.h"
#import <sqlite3.h>
@interface ViewController ()<UISearchBarDelegate>
{
    NSString        *databasePath;
    NSMutableArray *name;
    NSMutableDictionary *dic;
    NSMutableArray *arrData;
    IBOutlet UISearchBar   *searchbar;
    
    sqlite3 *contactDB;
    
    IBOutlet UITableView *tbldATA;
      BOOL isSearching;
    NSMutableArray *ArrFiltered;
    NSMutableArray  *searchedContactList;
    NSMutableArray  *nameArray;
}
@property (nonatomic, strong) DBManager *dbManager;
@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    name=[[NSMutableArray alloc] init];
    ArrFiltered=[[NSMutableArray alloc] init];
    searchedContactList=[[NSMutableArray alloc] init];
    nameArray=[[NSMutableArray alloc] init];

    arrData=[[NSMutableArray alloc]init];
     self.dbManager = [[DBManager alloc] initWithDatabaseFilename:@"junaid.sql"];
    [self SAve];
    
    self.sections = [[NSMutableDictionary alloc] init]; ///Global Object
    

    
    
   }
-(void)viewWillAppear:(BOOL)animated{
    [self address];
    [self getallData];
    [tbldATA reloadData];
    
    BOOL found;
    // Loop through the books and create our keys
    for (NSDictionary *book in arrData)
    {
        NSString *c = [[book objectForKey:@"First"] substringToIndex:1];
        found = NO;
        for (NSString *str in [self.sections allKeys])
        {
            if ([str isEqualToString:c])
            {
                found = YES;
            }
        }
        
        if (!found)
        {
            [self.sections setValue:[[NSMutableArray alloc] init] forKey:c];
            
        }
    }
    
    // Loop again and sort the books into their respective keys
    for (NSDictionary *book in arrData)
    {
        [[self.sections objectForKey:[[book objectForKey:@"First"] substringToIndex:1]] addObject:book];
    }
    
    // Sort each section array
    for (NSString *key in [self.sections allKeys])
    {
        [[self.sections objectForKey:key] sortUsingDescriptors:[NSArray arrayWithObject:[NSSortDescriptor sortDescriptorWithKey:@"First" ascending:YES]]];
    }
    isSearching=NO;
}
-(void)Contact{
        CNAuthorizationStatus status = [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];
        if (status == CNAuthorizationStatusDenied || status == CNAuthorizationStatusRestricted) {
            UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil message:@"This app previously was refused permissions to contacts; Please go to settings and grant permission to this app so it can use contacts" preferredStyle:UIAlertControllerStyleAlert];
            [alert addAction:[UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:nil]];
            [self presentViewController:alert animated:TRUE completion:nil];
            return;
        }
    
        CNContactStore *store = [[CNContactStore alloc] init];
        [store requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError * _Nullable error) {
    
            // make sure the user granted us access
    
            if (!granted) {
                dispatch_async(dispatch_get_main_queue(), ^{
                    // user didn't grant access;
                    // so, again, tell user here why app needs permissions in order  to do it's job;
                    // this is dispatched to the main queue because this request could be running on background thread
                });
                return;
            }
    
            // build array of contacts
    
            NSMutableArray *contacts = [NSMutableArray array];
    
            NSError *fetchError;
            CNContactFetchRequest *request = [[CNContactFetchRequest alloc] initWithKeysToFetch:@[CNContactIdentifierKey, [CNContactFormatter descriptorForRequiredKeysForStyle:CNContactFormatterStyleFullName],CNContactPhoneNumbersKey,CNContactImageDataKey]];
    
            BOOL success = [store enumerateContactsWithFetchRequest:request error:&fetchError usingBlock:^(CNContact *contact, BOOL *stop) {
                [contacts addObject:contact];
            }];
            if (!success) {
                NSLog(@"error = %@", fetchError);
            }
    
            // you can now do something with the list of contacts, for example, to show the names
    
            CNContactFormatter *formatter = [[CNContactFormatter alloc] init];
    
            for (CNContact *contact in contacts) {
                NSString *string = [formatter stringFromContact:contact.imageData];
                NSLog(@"contact = %@", string);
                
            }
            
            
        }];
}

-(void)address{
    ABAuthorizationStatus status = ABAddressBookGetAuthorizationStatus();
    
    if (status == kABAuthorizationStatusDenied || status == kABAuthorizationStatusRestricted) {
        // if you got here, user had previously denied/revoked permission for your
        // app to access the contacts, and all you can do is handle this gracefully,
        // perhaps telling the user that they have to go to settings to grant access
        // to contacts
        
        [[[UIAlertView alloc] initWithTitle:nil message:@"This app requires access to your contacts to function properly. Please visit to the \"Privacy\" section in the iPhone Settings app." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
        return;
    }
    
    CFErrorRef error = NULL;
    ABAddressBookRef addressBook = ABAddressBookCreateWithOptions(NULL, &error);
    
    if (!addressBook) {
        NSLog(@"ABAddressBookCreateWithOptions error: %@", CFBridgingRelease(error));
        return;
    }
    
    ABAddressBookRequestAccessWithCompletion(addressBook, ^(bool granted, CFErrorRef error) {
        if (error) {
            NSLog(@"ABAddressBookRequestAccessWithCompletion error: %@", CFBridgingRelease(error));
        }
        
        if (granted) {
            // if they gave you permission, then just carry on
            
            [self listPeopleInAddressBook:addressBook];
        } else {
            // however, if they didn't give you permission, handle it gracefully, for example...
            
            dispatch_async(dispatch_get_main_queue(), ^{
                // BTW, this is not on the main thread, so dispatch UI updates back to the main queue
                
                [[[UIAlertView alloc] initWithTitle:nil message:@"This app requires access to your contacts to function properly. Please visit to the \"Privacy\" section in the iPhone Settings app." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil] show];
            });
        }
        
        CFRelease(addressBook);
    });
}

- (void)listPeopleInAddressBook:(ABAddressBookRef)addressBook
{
    NSArray *allPeople = CFBridgingRelease(ABAddressBookCopyArrayOfAllPeople(addressBook));
    NSInteger numberOfPeople = [allPeople count];
    
    
    
    for (NSInteger i = 0; i < numberOfPeople; i++) {
        ABRecordRef person = (__bridge ABRecordRef)allPeople[i];
        
        NSString *firstName = CFBridgingRelease(ABRecordCopyValue(person, kABPersonFirstNameProperty));
        NSString *lastName  = CFBridgingRelease(ABRecordCopyValue(person, kABPersonLastNameProperty));
        NSLog(@"Name:%@ %@", firstName, lastName);
     

        
        ABMultiValueRef phoneNumbers = ABRecordCopyValue(person, kABPersonPhoneProperty);
        
        CFIndex numberOfPhoneNumbers = ABMultiValueGetCount(phoneNumbers);
        
        NSString *strNumbers = @"";
        
        for (CFIndex i = 0; i < numberOfPhoneNumbers; i++) {
            
            NSString *phoneNumber = CFBridgingRelease(ABMultiValueCopyValueAtIndex(phoneNumbers, i));
            NSLog(@"  phone:%@", phoneNumber);
            
            if(numberOfPhoneNumbers-1 == i) {
                strNumbers = [NSString stringWithFormat:@"%@%@",strNumbers, phoneNumber];
            }
            else {
                strNumbers = [NSString stringWithFormat:@"%@%@,",strNumbers, phoneNumber];
            }
            

        }
        
        CFRelease(phoneNumbers);

        sqlite3_stmt    *statement;
        
        const char *dbpath = [databasePath UTF8String];
        
        if (sqlite3_open(dbpath, &contactDB) == SQLITE_OK)
        {
            NSString *insertSQL = [NSString stringWithFormat: @"INSERT INTO CONTACTS (name, address, phone) VALUES (\"%@\", \"%@\", \"%@\")", firstName, lastName, strNumbers];
            
            const char *insert_stmt = [insertSQL UTF8String];
            
            sqlite3_prepare_v2(contactDB, insert_stmt, -1, &statement, NULL);
            if (sqlite3_step(statement) == SQLITE_DONE)
            {
                NSLog(@"Contact addes");
                
            } else {
                NSLog(@"NotAdd");
            }
            sqlite3_finalize(statement);
            sqlite3_close(contactDB);
        }

        
        NSLog(@"=============================================");
        
}
  
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
-(void)SAve{
    NSString *docsDir;
    NSArray *dirPaths;
    
    // Get the documents directory
    dirPaths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    
    docsDir = [dirPaths objectAtIndex:0];
    
    // Build the path to the database file
    databasePath = [[NSString alloc] initWithString: [docsDir stringByAppendingPathComponent: @"contacts.db"]];
    
    NSFileManager *filemgr = [NSFileManager defaultManager];
    
    if ([filemgr fileExistsAtPath: databasePath ] == NO)
    {
        const char *dbpath = [databasePath UTF8String];
        
        if (sqlite3_open(dbpath, &contactDB) == SQLITE_OK)
        {
            char *errMsg;
const char *sql_stmt = "CREATE TABLE IF NOT EXISTS CONTACTS(ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME TEXT, ADDRESS TEXT, PHONE TEXT)";
            
            if (sqlite3_exec(contactDB, sql_stmt, NULL, NULL, &errMsg) != SQLITE_OK)
            {
              
                NSLog(@"failes");
            }
            
            sqlite3_close(contactDB);
            
        } else {
         
            NSLog(@"failed to open");
        }
    }
    
    
    [tbldATA reloadData];
}


-(void)getallData
{
    sqlite3 * database;
    
    NSString *databasename=@"contacts.db";  // Your database Name.
    
    NSArray * documentpath=NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSAllDomainsMask, YES);
    
    NSString * DocDir=[documentpath objectAtIndex:0];
    
    NSString * databasepath=[DocDir stringByAppendingPathComponent:databasename];
    
    if(sqlite3_open([databasepath UTF8String], &database) == SQLITE_OK)
    {
        const char *sqlStatement = "SELECT * FROM CONTACTS";  // Your Tablename
        
        sqlite3_stmt *compiledStatement;
        
        if(sqlite3_prepare_v2(database, sqlStatement, -1, &compiledStatement, NULL) == SQLITE_OK)
        {
          
            [name removeAllObjects];
            
            while(sqlite3_step(compiledStatement) == SQLITE_ROW)
            {
                NSString *date = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(compiledStatement, 0)];
               
                
                NSString *customer = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(compiledStatement, 1)];
                NSLog(@"%@",customer);
                
                NSString *code1 = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(compiledStatement, 2)];
                 NSLog(@"%@",code1);
                
                NSString *code2 = [[NSString alloc] initWithUTF8String:(const char *) sqlite3_column_text(compiledStatement, 3)];
                
                NSArray *arrNumbers = [code2 componentsSeparatedByString:@","];
                NSLog(@"%@",arrNumbers);
                
                dic =[[NSMutableDictionary alloc] init];
                [dic setValue:customer forKey:@"First"];
                 [dic setValue:code1 forKey:@"last"];
                [dic setValue:arrNumbers forKey:@"number"];
                [arrData addObject:dic];
         
                NSLog(@"%@",arrData);
              
                [nameArray removeAllObjects];
                for (NSDictionary *dict in arrData) {
                    [nameArray addObject:dict[@"First"]];
                }
                
            }
        }
        sqlite3_finalize(compiledStatement);
    }
    sqlite3_close(database);
    [tbldATA reloadData];
}


#pragma mark - tAbleViewDelegates
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:
(NSInteger)section{
    
    if (isSearching)
    {
        return [searchedContactList count];
    }else{
     return [[self.sections valueForKey:[[[self.sections allKeys] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] objectAtIndex:section]] count];
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:
(NSIndexPath *)indexPath{
    
    
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tbldATA dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    if (isSearching) {
        NSMutableDictionary *dict = [searchedContactList objectAtIndex:indexPath.row];
           cell.textLabel.text=[NSString stringWithFormat:@"%@ %@" ,[dict objectForKey:@"First"],[dict valueForKey:@"last"]];

    }else{
        NSDictionary *book = [[self.sections valueForKey:[[[self.sections allKeys] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] objectAtIndex:indexPath.section]] objectAtIndex:indexPath.row];
        
        cell.textLabel.text=[NSString stringWithFormat:@"%@ %@" ,[book objectForKey:@"First"],[book valueForKey:@"last"]];
    }
    
    
  
    return cell;
}

- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section
{
    // Text Color
    UITableViewHeaderFooterView *header = (UITableViewHeaderFooterView *)view;
    //[header.textLabel setTextColor:[UIColor colorWithPatternImage:[UIImage imageNamed:@""]]];
    header.autoresizingMask=UIViewAutoresizingFlexibleWidth;
    UIView *vw = [[UIView alloc] initWithFrame:CGRectMake(0, 23,540, 2)];
    vw.backgroundColor = [UIColor clearColor];
  
    [ header.textLabel setTextColor:[UIColor blackColor]];
    header.autoresizingMask=UIViewAutoresizingFlexibleWidth;
    vw.autoresizingMask=UIViewAutoresizingFlexibleWidth;
    [header.textLabel addSubview:vw];
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView{
    if (isSearching==YES) {
        return 1;
    }else{
      return [[self.sections allKeys] count];
    }
}
- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section
{
    return 30;
}
- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section
{
     NSString *sectionName;
     sectionName = [[[self.sections allKeys] sortedArrayUsingSelector:@selector(localizedCaseInsensitiveCompare:)] objectAtIndex:section];
      return sectionName;
}


- (void)searchBar:(UISearchBar *)searchBar textDidChange:(NSString *)searchText
{
    NSString *searchString = searchbar.text;
    if ([searchString isEqualToString:@""])
    {
        isSearching=NO;
        [tbldATA reloadData];
    }
    else
    {
        isSearching =YES;
        [ArrFiltered removeAllObjects];
        [searchedContactList removeAllObjects];
        [self filterContentForSearchText:searchString scope:[arrData valueForKey:@"First"]];
    }
}

- (void)filterContentForSearchText:(NSString*)searchText scope:(NSString*)scope
{
    
    // Filter the array using NSPredicate
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF contains[c] %@",searchText];
    ArrFiltered = [[nameArray filteredArrayUsingPredicate:predicate] mutableCopy];
    
    for (NSString *str in ArrFiltered) {
        
        [searchedContactList addObject:arrData[[nameArray indexOfObject:str]]];
    }
    NSLog(@"Searched contact %@", searchedContactList);
    [tbldATA reloadData];
}
@end
